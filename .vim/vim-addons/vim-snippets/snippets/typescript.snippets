# Function
snippet fun
	function ${1:function_name}(${2:argument}) {
		${0:// body...}
	}
# block
snippet {
	{
	  ${1}
	}
# lambda
snippet =>
	(${1}) => {
	  ${2}
	}
# Anonymous Function
snippet f
	function(${1}) {
  	  ${0}
	}
# Immediate function
snippet (f
	(function(${1}) {
	  ${0}
	}(${2}));
# if
snippet if
	if (${1:true}) {
	  ${0}
	}
# if ... else
snippet ife
	if (${1:true}) {
	  ${2}
	} else {
	  ${0}
	}
# tertiary conditional
snippet ter
	${1:/* condition */} ? ${2:a} : ${0:b}
# switch
snippet switch
	switch (${1:expression}) {
	  case '${3:case}':
		${4}
		break;
	  ${0}
	  default:
		${2}
	}
# case
snippet case
	case '${1:case}':
	  ${2}
	  break;
	${0}
# for (...) {...}
snippet for
	for (var ${2:i} = 0, l = ${1:arr}.length; $2 < l; $2 ++) {
	  var ${3:v} = $1[$2];${0:}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:arr}.length - 1; $2 >= 0; $2 --) {
	  var ${3:v} = $1[$2];${0:}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
	  ${0}
	}
# try
snippet try
	try {
	  ${1}
	} catch (${2:e}) {
	  ${0:/* handle error */}
	}
# throw
snippet throw
	throw new Error('${1}');
# do...while
snippet do
	do {
	  ${0}
	} while (${1:/* condition */});
# setTimeout function
snippet timeout
	setTimeout(function () {${0}}${2}, ${1:10});
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')
# console.log
snippet cl
	console.log(${0});
# console.debug
snippet cd
	console.debug(${0});
# return
snippet ret
	return ${0:result}
# for (property in object ) { ... }
snippet fori
	for (var ${1:prop} in ${2:Things}) {
	  ${0:$2[$1]}
	}
# hasOwnProperty
snippet has
	hasOwnProperty(${0})
# docstring
snippet /**
	/**
	 * ${0}
	 */
# JSON.parse
snippet jsonp
	JSON.parse(${0:jstr});
# JSON.stringify
snippet jsons
	JSON.stringify(${0:object});
# self-defining function
snippet sdf
	var ${1:function_name} = function (${2:argument}) {
	  ${3}

	  $1 = function ($2) {
		${0}
	  };
	};
